import collections
        #L  U  R  D  
Pipe = [[0, 1, 0, 1],       #1
        [1, 0, 1, 0],       #2
        [0, 0, 1, 1],       #3
        [1, 0, 0 ,1],       #4
        [1, 1, 0, 0],       #5
        [0, 1, 1, 0],       #6
        [1, 1, 1, 1]]       #7

Q = [(0, -1), (-1, 0), (0, 1), (1, 0)] 
# direct 0 di sang trai 1 di len tren 2 di sang phai 3 di xuong
def  Check_Pipe(s, f, direct):
    s = int(s) - 1
    f = int(f) - 1
    if (Pipe[s][direct] == 0): 
        return False
    else:
        dir =direct
        if (dir == 0): 
            dir = 2
        elif (dir == 1): 
            dir = 3
        elif (dir == 2): 



            dir = 0
        elif (dir == 3): 
            dir = 1

        if (Pipe[f][dir] == 1):
            return True
        else:
            return False

def _Isinmap(x, y, n, m):
    return ((x < 0) or (x >= n) or (y < 0) or (y >= m))

def ChangeValue(result,vt,s):
    q=""
    for i in range(vt):
        q = q + result[i]
    q = q + s
    for i in range(vt+1,len(result)):
        q= q + result[i]
    return q
def bfs(arr, Startx, Starty,n , m):
    Track = []
    for i in range(n):
        tmp = []
        for j in range(m):
            tmp.append((0, 0))
        Track.append(tmp)

    de = collections.deque()
    Direction = [0, 0, 0, 0]
    B = [False, False, False, False]

    for i in range(len(Q)):
        ux, uy = Q[i]
        vx = Startx + ux
        vy = Starty + uy
        if (_Isinmap(vx, vy, n, m) == False):
            if (Track[vx][vy] == (0, 0)):
                    if ((arr[vx][vy] >= '1' and arr[vx][vy] <= '7') or (arr[vx][vy].isupper())):   
                        if(Check_Pipe('7',arr[vx][vy],i)):
                            if (arr[vx][vy] == '7'):
                                if ((i == 0) or (i==2)):
                                    arr[vx] = ChangeValue(arr[vx],vy,'2')
                                else:
                                    arr[vx] = ChangeValue(arr[vx],vy,'1')
                            #print(vx, vy)
                            de.append((vx,vy))
                            Track[vx][vy] = (-1, i)
                            Direction[i] = -1

    while de:
        x, y =de.pop()
        #print(x, y)
        for i in range(len(Q)):
            ux, uy = Q[i]
            vx = x + ux
            vy = y + uy
            C = Track[x][y][0]
            D = Track[x][y][1]
            if (_Isinmap(vx, vy, n, m) == False):
                if (Track[vx][vy] == (0, 0)):
                    #print(vx,vy,arr[vx][vy])
                    if ((arr[vx][vy] >= '1' and arr[vx][vy] <= '7') or (arr[vx][vy].isupper())):   
                        if (arr[vx][vy].isupper()): 
                            if(arr[vx][vy] == arr[Startx][Starty].upper()):
                                #print("Yes")
                                if (Check_Pipe(arr[x][y],'7',i)):
                                    Count, Direct = Track[x][y]
                                    B[Direct] = True
                                    Direction[Direct] = Count * (-1)
                            else:
                                if (Check_Pipe(arr[x][y],'7',i)):
                                    Count, Direct = Track[x][y]
                                  

                            continue
                        if (Check_Pipe(arr[x][y],arr[vx][vy],i)):
                            if (arr[vx][vy] == '7'):
                                if ((i == 0) or (i==2)):
                                    arr[vx] = ChangeValue(arr[vx],vy,'2')
                                else:
                                    arr[vx] = ChangeValue(arr[vx],vy,'1')
                            Track[vx][vy] = (C - 1, D)
                            Direction[D] -= 1 
                            de.append((vx,vy))
    """for i in range(4):
        print(Direction[i],end = ' ')
    print()
    for i in range(4):
        print(B[i],end = ' ')
    print()"""
    return Direction

n = int(input())
a = []
for i in range(n):
    a.append(input())

m = len(a[0])

Station = []
for i in range(n):
    for j in range(len(a[i])):
        if (a[i][j].islower() == True):
            Station.append((i, j))


check = []
STT = 1
Pipe_7 =len(Station) + 1
sum = 0
s = []
Min = 10000000
kt = 1
Same = []

for i in range(n):
    tmp = []
    for j in range(m):
        tmp.append(0)
    Same.append(tmp)

for i in range(len(Station)):
    x, y = Station[i]
    A = []
    for i in range(n):
        A.append(a[i])
    Direction = bfs(a, x, y, n, m)
    for i in range(4):
        if (Direction[i] != 0):
            s.append(abs(Direction[i]))
            if (Direction[i] < 0):
                if Min > abs(Direction[i]):
                    kt = -1
                    Min = abs(Direction[i])
    for i in range(n):
        for j in range(m):
            if (a[i][j] != A[i][j]):
                Same[i][j] += 1

    a = A
    #print(Direction)
t = 0
for i in range(n):
    for j in range(m):
        if (Same[i][j] >= 1):
            t = t - (Same[i][j] - 1)

for i in range(len(s)):
    sum = sum + min(s[i],Min)
if (kt == 1):
    sum = sum + t
print(kt* sum)      
#print(Same)