#0 : U
#1 : B
#2 : L
#3 : R

Direction = dict({"U" : [(0, 0), (3, 8), (2, 4)],
                  "u" : [(0, 0), (0, 1), (0, 2), (0, 3), (3, 8), (3, 3), (3, 7), (3, 6), (2, 4), (2, 6), (2, 5), (2, 1)],
                  "R" : [(3, 0), (0, 8), (1, 4)],
                  "r" : [(3, 0), (3, 1), (3, 2), (3, 3), (0, 8), (0, 3), (0, 7), (0, 6), (1, 4), (1, 6), (1, 5), (1, 1)],
                  "B" : [(1, 0), (2, 8), (3, 4)],
                  "b" : [(1, 0), (1, 1), (1, 2), (1, 3), (2, 8), (2, 3), (2, 7), (2, 6), (3, 4), (3, 6), (3, 5), (3, 1)],
                  "L" : [(2, 0), (1, 8), (0, 4)],
                  "l" : [(2, 0), (2, 1), (2, 2), (2, 3), (1, 8), (1, 3), (1, 7), (1 ,6), (0, 4), (0, 6), (0, 5), (0, 1)],
                })

def process(Rubik, T):
    _Rubik = []
    for i in range(4):
        tmp = []
        for j in range(9):
            tmp.append(Rubik[i][j])
        _Rubik.append(tmp)
    #print(_Rubik)
    n = 2
    if (len(T) == 1):
        a = Direction[T[0]]
        if (T[0].isupper()):
            for i in range(n):
                x1, y1 = a[i]
                x2, y2 = a[i+1]
                #print(x1, y1, x2, y2)
                _Rubik[x1][y1] = Rubik[x2][y2]
            x1, y1 = a[n]
            x2, y2 = a[0]
            #print(x1, y1, x2, y2)
            _Rubik[x1][y1] = Rubik[x2][y2]
        else:
            for i in range(n):
                for j in range(4):
                    x1, y1 = a[i * 4 + j]
                    x2, y2 = a[(i + 1) * 4 + j]
                    _Rubik[x1][y1] = Rubik[x2][y2]
            for j in range(4):
                x1, y1 = a[n * 4 + j]
                x2, y2 = a[0 * 4 + j]
                _Rubik[x1][y1] = Rubik[x2][y2]           
    else:
        a = Direction[T[0]]
        #print(len(a))
        if (T[0].isupper()):
            for i in range(0, n):
                x1, y1 = a[i+1]
                x2, y2 = a[i]
                _Rubik[x1][y1] = Rubik[x2][y2]

            x1, y1 = a[0]
            x2, y2 = a[n]
            _Rubik[x1][y1] = Rubik[x2][y2]
        else:
            for i in range(n):
                for j in range(4):
                    #print((i + 1) * 4 + j)
                    x1, y1 = a[(i + 1) * 4 + j]
                    x2, y2 = a[i * 4 + j]
                    #print(_Rubik[x1][y1],  Rubik[x2][y2])
                    #print(x1, y1, x2, y2)
                    _Rubik[x1][y1] = Rubik[x2][y2]
            for j in range(4):
                x1, y1 = a[0 * 4 + j]
                x2, y2 = a[n * 4 + j]
                #print(_Rubik[x1][y1],  Rubik[x2][y2])
                #print(x1, y1, x2, y2)
                _Rubik[x1][y1] = Rubik[x2][y2]     

    """for i in range(4):
       print(*_Rubik[i])"""
    return _Rubik

Color = list(map(str, input().split()))
Turn = list(map(str, input().split()))
Turn = Turn[::-1]

Rubik = []
for i in range(4):
    tmp = []
    for j in range(9):
        tmp.append(Color[i])
    Rubik.append(tmp)



for i in range(len(Turn)):
    Rubik = process(Rubik, Turn[i])
    """print()
    for i in range(4):
        print(*Rubik[i])
    print()"""

for i in range(4):
    print(*Rubik[i])